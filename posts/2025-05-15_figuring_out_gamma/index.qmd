---
title: "Figuring out the gamma distribution"
subtitle: "Obstacles to replication in corpus linguistics"
description: "This blog post is part of a small series on obstacles to replication in corpus linguistics. It deals with a prevalent issue in corpus data analysis: the non-independence of data points that results from clustered (or hierarchical) data layouts. I show how an inadequate analysis can produce unduly narrow expectations of a replication study."
date: 2025-05-02
categories: [corpus linguistics, replication crisis, regression, clustered data]
citation: 
  url: https://lsoenning.github.io/posts/2025-05-15_figuring_out_gamma/ 
draft: true
---



```{r}
#| eval: false

install.packages("epitrix")
library(epitrix)

gamma_mucv2shapescale(mu = 1, cv = 1/3.4363)
.55^3
```





Try to simulate data usng Poisson-Lognormal

```{r}
#| eval: false

n_tokens_sim <- NA
for(i in 1:length(sample_speakers)){
  n_tokens_sim[i] <- sum(rpois(10000, exp(sample_speakers[i])))
}

sim_data <- data.frame(
  n_tokens = n_tokens_sim,
  n_words = 10000,
  speaker = 1:length(sample_speakers)
)

m_nb_sim <- MASS::glm.nb(
  n_tokens ~ 1 + offset(log(n_words)),
  data = sim_data)

m_pr_sim <- glmer(
	n_tokens ~ 1 + offset(log(n_words)) + (1|speaker), 
	data = sim_data,
	family = "poisson",
	control = glmerControl(optimizer="bobyqa"))

```

```{r}
#| eval: false
summary(m_nb_sim)
```


```{r}
#| eval: false
arm::display(m_pr_sim)
```

```{r}
#| eval: false
sd(ranef(m_pr_sim)$speaker[,1])
```




Try to simulate data using Poisson-Gamma

```{r}
#| eval: false

dgamma_to_dots <- function(n_dots = 100, scale_parameter = 1) 
{
    seq_quantiles <- seq(0, 1, length = n_dots + 1) - (1/n_dots)/2
    seq_quantiles <- seq_quantiles[-1]
    output <- qGA(seq_quantiles, mu = 1, sigma = scale_parameter)
    return(output)
}

sample_speakers_gamma <- dgamma_to_dots(200, scale_parameter = 1/sqrt(3.4363))

n_tokens_sim <- NA
for(i in 1:length(sample_speakers_gamma)){
  n_tokens_sim[i] <- sum(rpois(10000, exp(coef(m_nb)) * sample_speakers_gamma[i]))
}

sim_data <- data.frame(
  n_tokens = n_tokens_sim,
  n_words = 10000,
  speaker = 1:length(sample_speakers_gamma)
)

m_nb_sim <- MASS::glm.nb(
  n_tokens ~ 1 + offset(log(n_words)),
  data = sim_data)

m_pr_sim <- glmer(
	n_tokens ~ 1 + offset(log(n_words)) + (1|speaker), 
	data = sim_data,
	family = "poisson",
	control = glmerControl(optimizer="bobyqa"))

```

```{r}
#| eval: false
summary(m_nb_sim)
```


```{r}
#| eval: false
arm::display(m_pr_sim)
```

```{r}
#| eval: false
sd(ranef(m_pr_sim)$speaker[,1])
```



```{r}
#| eval: false
#| fig-width: 4
#| fig-height: 2
#| code-fold: true
#| code-summary: "draw figure" 
#| label: fig-lognormal
#| fig-cap: "The log-normal distribution (black) vs. the gamma distribution (grey) describing between-speaker variability in the usage rate of *actually*."
#| message: false
#| warning: false

x_seq <- seq(0, .006, length = 100)

xyplot(
  1~1, type="n", xlim=c(0, .006), ylim=c(0,1.5),
  par.settings=my_settings, axis=axis_L,
  scales=list(y=list(at=0), x=list(at=(0:6)/1000, label=c(0,1,2,3,4,5,6))),
  ylab="Density", xlab="Ocurrences per thousand words",
  panel=function(x,y,...){
    panel.segments(x0=1, x1=1, y0=0, y1=1.5, col=1)
    panel.points(x = seq(.01, 5, length=200)*exp(coef(m_nb)),
                 y = dGA(seq(.01, 5, length=200), mu=1, sigma=(1/3.4363)),
                 type="l", col = "grey50")
    
    panel.points(x = x_seq,
                 y = dlnorm(x_seq, 
                            meanlog = fixef(m_pr), 
                            sdlog = 0.55)/600,
                 type="l")
    panel.segments(x0=0, x1=.006, y0=0, y1=0)
    panel.text(x = 4, y = .2, label="Log-normal distribution", adj=0, cex=.9)
    panel.text(x = 1.5, y = .45, label="Gamma distribution", adj=0, col = "grey50", cex=.9)
    
    panel.abline(v = exp(fixef(m_pr)))
    panel.abline(v = exp(coef(m_nb)), col = "grey50")
    
    panel.abline(v = exp(fixef(m_pr) + (.55^2)/2))
    })

1/(exp(.55^2) - 1)

exp(coef(m_nb))*1000
exp(fixef(m_pr))*1000
```
